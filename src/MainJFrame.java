/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Unespetro
 */
import javax.swing.*;
import javax.swing.text.*;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import loci.common.services.DependencyException;
import loci.common.services.ServiceException;
import loci.common.services.ServiceFactory;
import loci.formats.FormatException;
import loci.formats.ImageReader;
import loci.formats.meta.IMetadata;
import loci.formats.out.APNGWriter;
import loci.formats.services.OMEXMLService;

public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {        
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        UIManager.put("FileChooser.openButtonText", "Selecionar");
        this.jLabel1.setText("");
        this.jLabel2.setText("");
        ((AbstractDocument) this.jTextField1.getDocument()).setDocumentFilter(new NumericRangeFilter(this.jSlider1));
        
        this.jSlider1.setMajorTickSpacing(10);
        this.jSlider1.setMinorTickSpacing(1);
        JSlider slider = this.jSlider1;
        JTextField textField = this.jTextField1;

        // Adiciona o filtro ao Document do JTextField
        //((AbstractDocument) textField.getDocument()).setDocumentFilter(new NumericRangeFilter(slider));

        // Sincroniza o JTextField quando o JSlider Ã© ajustado
        this.jSlider1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (!slider.getValueIsAdjusting()) {
                    textField.setText(String.valueOf(slider.getValue()));
                }
            }
        });
        
        textField.setText("85");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton3.setText("Convert");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jButton1.setLabel("Vsi select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Destiny select");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel1");

        jTextField1.setText("70");

        jLabel3.setText("Quality compression");

        jLabel4.setText("Arquivo:");

        jLabel6.setText("Destino:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 117, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jLabel6))
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jLabel5.setText("Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(255, 255, 255))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(285, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //
        if (this.jLabel1.getText().length()<1) {
            JOptionPane.showMessageDialog(this, "Selecione o arquivo", "AtenÃ§Ã£o", 1);
            return;
        }
        if (this.jLabel2.getText().length()<1) {
            JOptionPane.showMessageDialog(this, "Selecione o destino");
            return;
        }
        this.enabledisable(false);
        this.repaint();
        
        
        MainJFrame frm = this;
        // Executa a operaÃ§Ã£o de cÃ³pia em um SwingWorker
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    frm.convert(frm.jLabel1.getText(), frm.jLabel2.getText());
                } catch (FormatException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DependencyException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ServiceException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }

            @Override
            protected void done() {
                // Atualiza o texto do botÃ£o de volta para "Open File"
                frm.enabledisable(true);
                frm.repaint();
                JOptionPane.showMessageDialog(frm, "ConversÃ£o finalizada!", "", -1);
            }
        };
        worker.execute();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);        

        // Abre o JFileChooser e obtÃ©m o resultado
        int result = fileChooser.showOpenDialog(this);

        // Se o usuÃ¡rio selecionar um arquivo, atualiza o label com o caminho do arquivo
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            this.jLabel1.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);   

        // Abre o JFileChooser e obtÃ©m o resultado
        int result = fileChooser.showOpenDialog(this);

        // Se o usuÃ¡rio selecionar um arquivo, atualiza o label com o caminho do arquivo
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            this.jLabel2.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void enabledisable(boolean value) {
        this.jButton1.setEnabled(value);
        this.jButton2.setEnabled(value);
        this.jButton3.setEnabled(value);
        this.jSlider1.setEnabled(value);
        this.jTextField1.setEnabled(value);
    }
    
    public void convert(String inputFile, String dest) throws FormatException, IOException, DependencyException, ServiceException {
        ServiceFactory factory = new ServiceFactory();
        OMEXMLService service = factory.getInstance(OMEXMLService.class);
        IMetadata omexml = service.createOMEXMLMetadata();
        
        // set up the reader and associate it with the input file
        ImageReader reader = new ImageReader();
        reader.setMetadataStore(omexml);
        reader.setId(inputFile);
        
      // set up the writer and associate it with the output file
        //ImageWriter writer = new ImageWriter();        
        
        int sizeX = reader.getSizeX();
        int sizeY = reader.getSizeY();
        int sizeZ = reader.getSizeZ();
        int sizeC = reader.getSizeC();
        int sizeT = reader.getSizeT();
        
        this.jLabel5.setText("Status: Iniciando ConversÃ£o");
        this.repaint();
        
        // Set output format to JPEG
        //writer.setCompression("JPEG-2000");
        // TODO code application logic here
        
        // Loop over all planes in the input file
        for (int z = 0; z < sizeZ; z++) {
            //if (z>0) break;
            this.jLabel5.setText("Status: obtendo profundidade " + z + " de " + sizeZ); this.repaint();
            String outputFile = dest + "\\depth_" + z;
            String inputImagePath = outputFile + "_temp";

            byte[] plane = reader.openBytes(z);

            APNGWriter writer = new APNGWriter();
            writer.setMetadataRetrieve(omexml);
            writer.setInterleaved(reader.isInterleaved());
            writer.setId(inputImagePath);

            writer.saveBytes(0, plane);
            writer.close();

            String outputImagePath = outputFile+".jpg";

            try {
                this.jLabel5.setText("Status: convertendo para jpg profundidade " + z + " de " + sizeZ); this.repaint();
                System.out.println("Fase -");
                // Ler a imagem
                BufferedImage bufferedImage = ImageIO.read(new File(inputImagePath));
                System.out.println("Fase 0");

                Raster raster = bufferedImage.getData();
                int width = bufferedImage.getWidth();
                int height = bufferedImage.getHeight();
                int numBands = raster.getNumBands();

                // Criar uma nova imagem de 8 bits com o mesmo nÃºmero de canais
                BufferedImage outputImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);            

                int maxValue = 0;
                // Normalizar os valores de 16 bits para 8 bits e escrever na nova imagem
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        int[] pixel = new int[numBands];
                        raster.getPixel(x, y, pixel);
                        maxValue = Math.max(maxValue, Math.max(pixel[0], Math.max(pixel[1], pixel[2])));
                    }
                }

                System.out.println(maxValue);

                // Normalizar os valores de 16 bits para 8 bits e escrever na nova imagem
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        int[] pixel = new int[numBands];
                        raster.getPixel(x, y, pixel);

                        // Normalizar cada canal de 16 bits para 8 bits
                        int r = ((pixel[0] * 255) / maxValue);
                        int g = ((pixel[1] * 255) / maxValue);
                        int b = ((pixel[2] * 255) / maxValue);

                        // Combinar os canais em um Ãºnico valor de pixel de 24 bits (8 bits por canal)
                        int rgb = (r << 16) | (g << 8) | b;

                        // Definir o valor do pixel na nova imagem
                        outputImage.setRGB(x, y, rgb);
                    }
                }

                 // Salvar a imagem de saÃ­da como JPG
                //ImageIO.write(outputImage, "jpg", new File(outputImagePath));

                // ObtÃ©m o ImageWriter para o formato "jpg"
                Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
                if (!writers.hasNext()) {
                    throw new IllegalStateException("No writers found for format 'jpg'");
                }
                
                ImageWriter imgwriter = writers.next();

                // Configura o ImageOutputStream
                ImageOutputStream ios = ImageIO.createImageOutputStream(new File(outputImagePath));
                imgwriter.setOutput(ios);

                // Configura os parÃ¢metros de escrita com a qualidade de compressÃ£o desejada
                ImageWriteParam param = imgwriter.getDefaultWriteParam();
                if (param.canWriteCompressed()) {
                    param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                    param.setCompressionQuality(Integer.parseInt(this.jTextField1.getText()) / 100.0f); // Qualidade de compressÃ£o entre 0 e 1
                }

                // Escreve a imagem com os parÃ¢metros configurados
                imgwriter.write(null, new IIOImage(outputImage, null, null), param);

                // Fecha o stream
                ios.close();
                imgwriter.dispose();

            } catch (IOException ex) {
                System.out.println("Erro ao ler a imagem: " + ex.getMessage());
                ex.printStackTrace();
            }
            // Remover png temporÃ¡rio
            File fldel = new File(inputImagePath);
            fldel.delete();
        }
        // Close the reader and writer
        reader.close();
        this.jLabel5.setText("Status: ConcluÃ­do");
    }
    
    static class NumericRangeFilter extends DocumentFilter {
        private JSlider slider;

        public NumericRangeFilter(JSlider slider) {
            this.slider = slider;
        }

        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if (string != null) {
                replace(fb, offset, 0, string, attr);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = new StringBuilder(currentText).replace(offset, offset + length, text).toString();

            if (isValidInteger(newText)) {
                super.replace(fb, offset, length, text, attrs);
                updateSlider(newText);
            }
        }

        @Override
        public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
            String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
            String newText = new StringBuilder(currentText).delete(offset, offset + length).toString();

            if (isValidInteger(newText)) {
                super.remove(fb, offset, length);
                updateSlider(newText);
            }
        }

        private boolean isValidInteger(String text) {
            if (text.isEmpty()) {
                return true;
            }
            try {
                int value = Integer.parseInt(text);
                return value >= 0 && value <= 100;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        private void updateSlider(String text) {
            if (!text.isEmpty()) {
                int value = Integer.parseInt(text);
                slider.setValue(value);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
